
;********************************************************************************
;* This file is part of gibl:							*
;*	Gordons Interactive Basic Language                                      *
;********************************************************************************
;*    A Tiny Basic for the 6502 inspired by the NIBL Tiny Basic interpreter;	*
;*    "National Industrial Basic Language" originally for the INS8060 SC/MP	*
;*    system.									*
;*										*
;*    gibl is distributed under a "Source Available" license.			*
;*	It is NOT Open source and must not be treated as such.			*
;*										*
;*    See the file LICENSE for details.						*
;*										*
;*    gibl is Copyright (c) 2023 by Gordon Henderson				*
;********************************************************************************

See also README.TXT.

BUILDING:

GIBL was developed on a Linux system with the ca65 macro assembler
from the cc65 suite. There is a standard Makefile. Good luck if you are
building it on anything else.

It appears to have turned into an exercise in how not to create something
that's portable - although while it is portable; Highly Portable, it
may not appear to be as easy to port as you might imagine. Sorry -GH-


How to port GIBL
================

In simple terms, you need to create a "platform" for your own hardware.
The data required is as follows - this is based on copying my standard
"ruby" platform to your own.

For demonstration, lets say your platform is called Storm

1. Copy data-ruby.s to data-storm.s
2. Copy data-ruby.h to data-storm.h
3. Edit data.h
      Insert a new .if stanza to mimic those already in the file.
      Hopefully this is fairly obvious.

4. Copy ruby.cfg to storm.cfg
5. Edit storm.cfg
      This is the linker configuration file. You'll edit the lines
      to reflect the data and memory areas in your system.

6. Copy system-ruby.s to system-storm.s.
      Edit this file - This is where the major changed will need to
      be made. You'll need to specify the IO routines and any extra
      startup code required to get GIBL running.

7. Edit Makefile.
      Add in "stuff" based on the existing ruby lines remembering that
      lines in a Makefile start with a TAB and not a SPACE. This is very
      very important.

8. Try: make storm

9. GOTO 3

DATA:
===============================================================================

GIBL works best with $F0 or 240 bytes of static data. Ideally this would
be located in Zero Page, however due to the ZP usage by your chosen
operating system or hardware, this may not be possible. E.g. Ruby OS
reserves $00 through $8F for applications and requires $90 through $FF
for itself.

The absolute minimum for zero page data is 35 bytes. The more you can
pack into ZP, the faster (and smaller) GIBL will be.

The data is therefor split into two sections and the linker control
file xxx.cfg specifies where they go. You may need to edit these files
to suite your own system.

Note that the Ruby SBC has 32KB of RAM available, and user data (or
BASIC programs normally start at $0E00, but there is space starting
at $0400 for additional data. This may seem rather wasteful but that's
how it was in the Acorn BBC Micro which the Ruby SBC and OS tries
to mimic.


LIMITATION ON OBJECT CODE START ADDRESS:
===============================================================================

The IL "instruction set" and program is a list of 16-bit values - each
16-bit value has the top 3 bits containing the "op code" and the bottom
13 bits specifying an address.

The address is the address of the handling routine for that opcode or
it contains the address of the "fail" routine, should the opcode be a
test and that test fails.

This means that there may be restrictions where the code is assembled
into, and how long the code image can be (if you wish to extend it,
for example). As we only have 13 bits of address, then the upper limit
on the code size is 8KB. ie. from $0000 through $1FFF plus the base
address which MUST be on a 4K boundary. (ie. $0000, $1000, $5000, $8000,
etc. and for obvious reasons $0000 is not a good start address...)

If you decide to expand the code then you can go over 4KB but no more
than 8KB. The code must then be loaded at an 8KB boundary.

  ********************************************************************
  *** The code MUST be assembled to start at a 4KB or 8KB boundary ***
  ********************************************************************

You may wish to see the start of the file ilExec.s for this code and
the il.h file for the code that handles the mapping of the IL address
to the program loaded address.

But in essence you need to mask off the top 3 bits and add the start
address into the value to generate a true 16-bit address for the handler
as the top 3 bits are used for the flags/opcode.


THE SYSTEM-SPECIFIC CODE:
===============================================================================

Almost everything else you need to do is in one file:

  system-ruby.s

You should start by copying this file and naming it for your platform.
e.g. if you were porting it to the storm control computer, then you
might call it

  system-storm.s

You will also need to edit the Makefile. Should be obvious what lines
to change. See above.

You will need to provide the following routines:

	putChar		; Sends the character in Acc to the output device
	putStr		; Puts a string (sample provided)
	newLine		; Prints a newline
	getChar		; Waits for and returns the next character typed
	getLine		; Gets a line of text. (sample provided)
	checkInt	; Checks for a keyboard interrupt

getLine is the most complex - you need to read in a line of text which must
be less than 127 characters in length including the terminating CR (which
must be present). It can strip off leading any trailing spaces if needs
but that's not necessary. You can provide editing features as desired but
remember the original TinyBasics were used with a Teletype.

There is a minimal 'getLine' routine provided but you may wish to expand
upon it, or use one that your operating system provides.


MISSING:
===============================================================================

Load and Save are obviously missing. RubyOS provides means to read text
in from a file and output text to a file in much the same way you'd
enable the tape punch on a Teletype 33...

If you need them, you'll need to write them. I suggest using the LIST
command in the IL as a starting point to get the syntax, and use the
LIST routine to list the text of the program to your output device, and
feed input into the editor routines (see editor.s)

Or just arrange your serial terminal emulator to capture text for save
and feed text back into it for load ... If doing this, then making the
very first line of your code read:

  NEW

is probably not a bad thing to do. All the examples supplied will be
like this.

If using your terminals file-send facility then you may need to slow
down the input or pause after every line at higher baud rates.

Good luck and please let me know if you successfully port it to your own
system. I may be able to help, but time is limited...

And remember; GIBL is provided for personal use only. If you wish to us it
in a commercial situation, then licensing and paid support is available.
