MEMORY {
    ZEROPAGE: start = $0000, size = $00E0, file="";
    CODE:     file= %O, start = $800, size = __STACKSTART__ - __STACKSIZE__ - %S;
}

SEGMENTS {
    ZEROPAGE: load = ZEROPAGE, define = yes, type = zp;
    BASICZP:  load = ZEROPAGE, optional = yes, start = $1B, type = zp;
    STARTUP:  load = CODE, type = ro, optional = yes;
    ONCE:     load = CODE, type = ro, optional = yes;
    CODE:     load = CODE, define = yes, type = ro;
    RODATA:   load = CODE, define = yes, type = ro, optional = yes;
    DATA:     load = CODE, define = yes, type = rw, optional = yes;
    BSS:      load = CODE, define = yes, type = bss, optional = yes;
}

FEATURES {
    STARTADDRESS: default = $0800;
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}

SYMBOLS {
    __STACKSIZE__:  type = weak, value = $0800; # 2k stack
    __STACKSTART__: type = weak, value = $BEFF;
    _sfos_ram_base:  type = weak, value = __BSS_LOAD__ + __BSS_SIZE__;
    _sfos_ram_top:   type = weak, value = __STACKSTART__ - __STACKSIZE__;
}


# vim: set et sw=4 ts=4
